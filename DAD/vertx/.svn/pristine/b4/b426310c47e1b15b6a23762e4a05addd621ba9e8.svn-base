package vertx;

import java.util.ArrayList;
import java.util.List;

import io.netty.handler.codec.mqtt.MqttQoS;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.asyncsql.MySQLClient;
import io.vertx.ext.sql.SQLClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.mqtt.MqttEndpoint;
import io.vertx.mqtt.MqttServer;
import io.vertx.mqtt.MqttTopicSubscription;
import io.vertx.mqtt.messages.MqttPublishMessage;

public class RestEP extends AbstractVerticle {

	private static RegFechas fecha = new RegFechas();
	private SQLClient mySQLClient;
	/*
	 * TODO, la única manera de que el nodeMCU reciba, es publicando desde su propio MqttEndPoint.
	 */
	private static List<MqttEndpoint> endpoints = new ArrayList<>(); 

	public void start(Future<Void> startFuture) {
		// Acceso a BD
		JsonObject mySQLClientConfig = new JsonObject().put("host", "127.0.0.1").put("port", 3306)
				.put("database", "tolmet").put("username", "root").put("password", "root");

		mySQLClient = MySQLClient.createShared(vertx, mySQLClientConfig);

		Router router = Router.router(vertx);

		// Inicializamos el Verticle. Lanzando el servidor HTTP
		vertx.createHttpServer().requestHandler(router::accept).listen(8083, res -> {
			if (res.succeeded()) {
				System.out.println("Servidor REST desplegado");
			} else {
				System.out.println("Error: " + res.cause());
			}
		});

		// Creación del servidor MQTT
		MqttServer mqttServer = MqttServer.create(vertx);
		mqttServer.endpointHandler(endpoint -> {
			System.out.println("Nuevo cliente MQTT [" + endpoint.clientIdentifier()
					+ "] solicitando suscribirse [Nueva sesión: " + endpoint.isCleanSession() + "]");
			endpoints.add(endpoint);// TODO --> prueba
			endpoint.accept(false);
			handleSubscription(endpoint);
			handleUnsubscription(endpoint);
			publishHandler(endpoint);
			handleClientDisconnect(endpoint);
		}).listen(ar -> {
			if (ar.succeeded()) {
				System.out.println("MQTT server en puerto " + ar.result().actualPort());
			} else {
				System.out.println("Error desplegando el MQTT server");
				ar.cause().printStackTrace();
			}
		});

		// Handlers para cada operación CRUD de usuarios.
		router.route("/api/mensajes").handler(BodyHandler.create());
		router.get("/api/mensajes/:idMensaje").handler(this::getMensaje);

		// Handlers para cada operación CRUD de usuarios.
		router.route("/api/usuarios").handler(BodyHandler.create());
		router.get("/api/usuarios").handler(this::getAllUsuarios);
		router.get("/api/usuarios/:idFilter").handler(this::getOneUsuario);
		router.put("/api/usuarios").handler(this::putElementUsuarios);
		router.delete("/api/usuarios/:idDelete").handler(this::deleteElementUsuarios);

		// Handlers para cada operación CRUD de sensores.
		router.route("/api/sensores").handler(BodyHandler.create());
		router.get("/api/sensores").handler(this::getAllSensores);
		router.get("/api/sensores/:idFilter").handler(this::getOneSensor);
		router.put("/api/sensores").handler(this::putElementSensores);
		router.delete("/api/sensores/:idDelete").handler(this::deleteElementSensores);

		// Handlers para cada operación CRUD de fechas.
		router.route("/api/fechas").handler(BodyHandler.create());
		router.get("/api/fechas").handler(this::getAllFechas);
		router.get("/api/fechas/:idFilter").handler(this::getOneFecha);
		router.put("/api/fechas").handler(this::putElementFechas);
		router.delete("/api/fechas/:idDelete").handler(this::deleteElementFechas);

		// Handlers para cada operación CRUD de ModWifi.
		router.route("/api/wifi").handler(BodyHandler.create());
		router.get("/api/wifi").handler(this::getAllMods);
		router.get("/api/wifi/:idFilter").handler(this::getOneMod);
		router.put("/api/wifi").handler(this::putElementMod);
		router.delete("/api/wifi/:idDelete").handler(this::deleteElementMod);

		// Handlers para cada operación CRUD de Elementos.
		router.route("/api/elementos").handler(BodyHandler.create());
		router.get("/api/elementos").handler(this::getAllElem);
		router.get("/api/elementos/:idFilter").handler(this::getOneElem);
		router.put("/api/elementos").handler(this::putElem);
		router.delete("/api/elementos/:idDelete").handler(this::deleteElem);

	}

	/********************************************************************************************
	 * Métodos para MQTT * *
	 *******************************************************************************************/
	// HANDLERS para la subscripción
	private static void handleSubscription(MqttEndpoint endpoint) {
		endpoint.subscribeHandler(subscribe -> {
			List<MqttQoS> grantedQosLevels = new ArrayList<>();
			for (MqttTopicSubscription s : subscribe.topicSubscriptions()) {
				System.out.println("Suscripción al topic " + s.topicName());
				grantedQosLevels.add(s.qualityOfService());
			}
			endpoint.subscribeAcknowledge(subscribe.messageId(), grantedQosLevels);
		});
	}

	// HADLERS para la desubscripción
	private static void handleUnsubscription(MqttEndpoint endpoint) {
		endpoint.unsubscribeHandler(unsubscribe -> {
			for (String t : unsubscribe.topics()) {
				System.out.println(
						"El cliente " + endpoint.clientIdentifier() + " ha eliminado la suscripción al canal " + t);
			}
			endpoint.unsubscribeAcknowledge(unsubscribe.messageId());
		});
	}

	// HADLERS para la publicación de mensajes
	private static void publishHandler(MqttEndpoint endpoint) {
		endpoint.publishHandler(message -> {
			handleMessage(message, endpoint);
		}).publishReleaseHandler(messageId -> {
			endpoint.publishComplete(messageId);
		});
	}

	private static void handleMessage(MqttPublishMessage message, MqttEndpoint endpoint) {
		System.out.println("Mensaje publicado");
		System.out.println("Topic: " + message.topicName() + ". Contenido: " + message.payload().toString());
		//TODO línea añadida para que se muestre en el nodeMCU, el mensaje publicado en el canal.
		endpoint.publish(message.topicName(), Buffer.buffer(message.payload().toString()), MqttQoS.AT_LEAST_ONCE, false,
				false);
		if (message.qosLevel() == MqttQoS.AT_LEAST_ONCE) {
			String topicName = message.topicName();
			switch (topicName) {
			// Hacer algo con el mensaje si es necesario
			}
			endpoint.publishAcknowledge(message.messageId());
		} else if (message.qosLevel() == MqttQoS.EXACTLY_ONCE) {
			endpoint.publishRelease(message.messageId());
		}
	}

	protected void handleClientDisconnect(MqttEndpoint endpoint) {
		endpoint.disconnectHandler(disconnect -> {

		});

	}

	/********************************************************************************************
	 * Métodos para VERT.X * *
	 *******************************************************************************************/
	private void getMensaje(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idMensaje");
		if (paramStr != null) {
			int param = Integer.parseInt(paramStr);
			if (param == 1) {
				// TODO
				MqttEndpoint x = endpoints.get(0).publish("inTopic", Buffer.buffer("temperatura"), MqttQoS.AT_LEAST_ONCE, false, false);
				if (x.isConnected()) {
					routingContext.response().end(Json.encodePrettily("OK"));
				} else {
					routingContext.response().setStatusCode(400).end("Error");
				}
				
			}
		}
	}

	// Operaciones CRUD de usuarios.
	private void getAllUsuarios(RoutingContext routingContext) {
		/** Para cuando se utilice BD */
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "SELECT * " + "FROM usuario ";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void getOneUsuario(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idFilter");
		if (paramStr != null) {
			try {
				int param = Integer.parseInt(paramStr);
				/** Para cuando se utilice BD */
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "SELECT id, nombre, apellido, email, clave " + "FROM usuario " + "WHERE id = ?";
						JsonArray paramQuery = new JsonArray().add(param);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows().get(0)));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	private void putElementUsuarios(RoutingContext routingContext) {
		Usuario state = Json.decodeValue(routingContext.getBodyAsString(), Usuario.class);
		/** Para cuando se utilice BD */
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "INSERT INTO usuario (nombre, apellido, email, clave) VALUES ('" + state.getNombre()
						+ "','" + state.getApellido() + "','" + state.getEmail() + "','" + state.getclave() + "')";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void deleteElementUsuarios(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idDelete");
		if (paramStr != null) {
			try {
				int param = Integer.parseInt(paramStr);
				/** Para cuando se utilice BD */
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "DELETE FROM usuario " + "WHERE id = ?";
						JsonArray paramQuery = new JsonArray().add(param);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows()));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	// Operaciones CRUD de sensores
	private void getAllSensores(RoutingContext routingContext) {
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "SELECT * " + "FROM sensores ";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void getOneSensor(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idFilter").trim();
		if (paramStr != null) {
			try {
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "SELECT idSensor, tipoSensor, descripcion, idWifi " + "FROM sensores "
								+ "WHERE idSensor = ?";
						JsonArray paramQuery = new JsonArray().add(paramStr);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows().get(0)));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	private void putElementSensores(RoutingContext routingContext) {
		Sensores state = Json.decodeValue(routingContext.getBodyAsString(), Sensores.class);
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "INSERT INTO sensores (idSensor, tipoSensor, descripcion, idWifi) VALUES ('"
						+ state.getIdSensor() + "','" + state.getTipoSensor() + "','" + state.getDescripcion() + "','"
						+ state.getIdWifi() + "')";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void deleteElementSensores(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idDelete");
		if (paramStr != null) {
			try {
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "DELETE FROM sensores " + "WHERE idSensor = ?";
						JsonArray paramQuery = new JsonArray().add(paramStr);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows()));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	// Operaciones CRUD de fechas
	private void getAllFechas(RoutingContext routingContext) {
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "SELECT * " + "FROM regfechas ";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void getOneFecha(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idFilter");
		if (paramStr != null) {
			try {
				int param = Integer.parseInt(paramStr);
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "SELECT id, idSensor, valor, fecha " + "FROM regFechas " + "WHERE id = ?";
						JsonArray paramQuery = new JsonArray().add(param);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows().get(0)));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	private void putElementFechas(RoutingContext routingContext) {
		RegFechas state = Json.decodeValue(routingContext.getBodyAsString(), RegFechas.class);
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "INSERT INTO regfechas (idSensor, valor, fecha) VALUES ('" + state.getidSensor() + "','"
						+ state.getValor() + "','" + fecha.getFecha() + "')";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void deleteElementFechas(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idDelete");
		if (paramStr != null) {
			try {
				int param = Integer.parseInt(paramStr);
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "DELETE FROM regfechas " + "WHERE id = ?";
						JsonArray paramQuery = new JsonArray().add(param);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows()));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	// Operaciones CRUD de modWifi
	private void getAllMods(RoutingContext routingContext) {
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "SELECT * " + "FROM modWifi ";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void getOneMod(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idFilter");
		if (paramStr != null) {
			try {
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "SELECT idWifi, descripcion " + "FROM modWifi " + "WHERE idWifi = ?";
						JsonArray paramQuery = new JsonArray().add(paramStr);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows().get(0)));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	private void putElementMod(RoutingContext routingContext) {
		ModWifi state = Json.decodeValue(routingContext.getBodyAsString(), ModWifi.class);
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "INSERT INTO modWifi (idWifi, descripcion) VALUES ('" + state.getIdWifi() + "','"
						+ state.getDescripcion() + "')";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void deleteElementMod(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idDelete");
		if (paramStr != null) {
			try {
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "DELETE FROM modWifi " + "WHERE idWifi = ?";
						JsonArray paramQuery = new JsonArray().add(paramStr);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows()));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	// Operaciones CRUD de elementos
	private void getAllElem(RoutingContext routingContext) {
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "SELECT * " + "FROM elementos ";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void getOneElem(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idFilter");
		if (paramStr != null) {
			try {
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "SELECT idElemento, estado, idWifiElem " + "FROM elementos "
								+ "WHERE idElemento = ?";
						JsonArray paramQuery = new JsonArray().add(paramStr);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows().get(0)));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

	private void putElem(RoutingContext routingContext) {
		Elementos state = Json.decodeValue(routingContext.getBodyAsString(), Elementos.class);
		mySQLClient.getConnection(conn -> {
			if (conn.succeeded()) {
				SQLConnection connection = conn.result();
				String query = "INSERT INTO elementos (idElemento, estado, idWifiElem) VALUES ('"
						+ state.getIdElemento() + "','" + state.isEstado() + "','" + state.getIdWifiElem() + "')";
				connection.query(query, res -> {
					if (res.succeeded()) {
						routingContext.response().end(Json.encodePrettily(res.result().getRows()));
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + res.cause());
					}
				});
			} else {
				routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
			}
		});
	}

	private void deleteElem(RoutingContext routingContext) {
		String paramStr = routingContext.request().getParam("idDelete");
		if (paramStr != null) {
			try {
				mySQLClient.getConnection(conn -> {
					if (conn.succeeded()) {
						SQLConnection connection = conn.result();
						String query = "DELETE FROM elementos " + "WHERE idElemento = ?";
						JsonArray paramQuery = new JsonArray().add(paramStr);
						connection.queryWithParams(query, paramQuery, res -> {
							if (res.succeeded()) {
								routingContext.response().end(Json.encodePrettily(res.result().getRows()));
							} else {
								routingContext.response().setStatusCode(400).end("Error: " + res.cause());
							}
						});
					} else {
						routingContext.response().setStatusCode(400).end("Error: " + conn.cause());
					}
				});
			} catch (ClassCastException e) {
				routingContext.response().setStatusCode(400).end();
			}
		} else {
			routingContext.response().setStatusCode(400).end();
		}
	}

}
